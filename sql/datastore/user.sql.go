// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package datastore

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkDuplicateEmail = `-- name: CheckDuplicateEmail :one
SELECT Count(*) from public.users where email = $1
`

func (q *Queries) CheckDuplicateEmail(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRow(ctx, checkDuplicateEmail, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const checkDuplicateUsername = `-- name: CheckDuplicateUsername :one
SELECT Count(*) from public.users where username = $1
`

func (q *Queries) CheckDuplicateUsername(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRow(ctx, checkDuplicateUsername, username)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO public.users(
	username, email, password_hash, first_name, last_name, created_at, updated_at, is_active)
	VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
    RETURNING id, username, email, password_hash, first_name, last_name, created_at, updated_at, is_active
`

type CreateUserParams struct {
	Username     string
	Email        string
	PasswordHash string
	FirstName    pgtype.Text
	LastName     pgtype.Text
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
	IsActive     pgtype.Bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.FirstName,
		arg.LastName,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, username, email, password_hash, first_name, last_name, created_at, updated_at, is_active FROM public.users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.PasswordHash,
			&i.FirstName,
			&i.LastName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
